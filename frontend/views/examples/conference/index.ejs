<% include ../../partials/header %>
<link href="css/main.css" rel="stylesheet" type="text/css">

<div id="content">
  <div class="wrap">
    <section id="share-wrap">
      <a href="#" id="unique-token">Share this room link</a>
    </section>

    <section id="enter-wrap">
      <div id="create-wrap">
        <p>영상회의를 시작하시겠습니까?</p>
        <button id="btn-start">Start</button>
      </div>
      <div id="wait-wrap"></div>
    </section>

    <section id="video-wrap">
    </section>
  </div>
</div>
<div id="content">
  <span id="icon-music">♬</span>

  <div class="wrap">
    <button type="button" onclick="init()">Motion</button>
    <div id="label-container"></div>
    <div class="buttons">
      <button id="btn-camera">Camera Pause</button>
      <button id="btn-mic" class="on">Mic</button>
      <button id="btn-tts">Text to speech</button>
    </div>
    <div id="result" style="overflow-y:scroll;" onScroll="spantitle.scrollLeft=this.scrollLeft;">
      <span class="final" id="final_span"></span>
      <span class="interim" id="interim_span"></span>
    </div>
    <audio id="audio" src="audio/ending.mp3"></audio>
    <!-- 
		<div>
		  <button onclick="document.getElementById('audio').play()">Play the Audio</button>
		  <button onclick="document.getElementById('audio').pause()">Pause the Audio</button>
		  <button onclick="document.getElementById('audio').volume+=0.2">Increase Volume</button>
		  <button onclick="document.getElementById('audio').volume-=0.2">Decrease Volume</button>
		</div>
		-->
  </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.1.1/socket.io.js"></script>
<script src="js/modules/peer-handler.js"></script>
<script src="js/modules/media-handler.js"></script>
<script src="js/main.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@teachablemachine/image@0.8/dist/teachablemachine-image.min.js"></script>
<script type="text/javascript">
  // More API functions here:
  // https://github.com/googlecreativelab/teachablemachine-community/tree/master/libraries/image

  // the link to your model provided by Teachable Machine export panel
  const URL = "https://teachablemachine.withgoogle.com/models/vq50X8L-p/";

  let model, webcam, labelContainer, maxPredictions;

  // Load the image model and setup the webcam
  async function init() {
    const modelURL = URL + "model.json";
    const metadataURL = URL + "metadata.json";

    // load the model and metadata
    // Refer to tmImage.loadFromFiles() in the API to support files from a file picker
    // or files from your local hard drive
    // Note: the pose library adds "tmImage" object to your window (window.tmImage)
    model = await tmImage.load(modelURL, metadataURL);
    maxPredictions = model.getTotalClasses();

    // Convenience function to setup a webcam
    const flip = true; // whether to flip the webcam
    webcam = new tmImage.Webcam(200, 200, flip); // width, height, flip
    await webcam.setup(); // request access to the webcam
    await webcam.play();
    window.requestAnimationFrame(loop);

    // append elements to the DOM
    labelContainer = document.getElementById("label-container");
    for (let i = 0; i < maxPredictions; i++) { // and class labels
      labelContainer.appendChild(document.createElement("div"));
    }
  }

  async function loop() {
    webcam.update(); // update the webcam frame
    await predict();
    window.requestAnimationFrame(loop);
  }

  // run the webcam image through the image model
  async function predict() {
    // predict can take in an image, video or canvas html element
    const prediction = await model.predict(webcam.canvas);
    for (let i = 0; i < maxPredictions; i++) {
      const classPrediction =
        prediction[i].className + ": " + prediction[i].probability.toFixed(2);
      labelContainer.childNodes[i].innerHTML = classPrediction;
    }
  }
</script>
<% include ../../partials/footer %>